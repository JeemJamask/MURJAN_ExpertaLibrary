# -*- coding: utf-8 -*-
"""Murjan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qR2otS25_gZEd7obP0yc4g6Uif57i189
"""

!pip install experta

!pip install --upgrade frozendict

from experta import *

# Define a Fact subclass for trash containers
class TrashContainer(Fact):
    pass

# Global variable to store the item type
item_type = None

# Define the expert system class inheriting from KnowledgeEngine
class ExpertSystem(KnowledgeEngine):
    # Rule to start the system
    @Rule()
    def start_system(self):
        global item_type
        print("---------------------------------------------------------------------")
        print("== üêö WELCOME TO ENVIRONMENTAL POLLUTION EXPERT SYSTEM (MURJAN) üêö ==")
        print("---------------------------------------------------------------------\n")
        while True:
            answer = input("‚û§ Did you pick up a waste item and want to know the appropriate trash container for it? (yes/no): ").lower()
            if answer == "no":
                print("Understood, have a great day!")
                print("\n----------------------------------------------")
                print("== üêö Thank you for using MURJAN system üêö == ")
                print("----------------------------------------------")
                self.reset()
                break
            elif answer == "yes":
                self.declare(TrashContainer(question="magnetic_field"))
                break
            else:
                print("Invalid input. Please enter 'yes' or 'no'.")

    # Rule to ask about magnetic field
    @Rule(TrashContainer(question="magnetic_field"))
    def ask_magnetic_field(self):
        global item_type
        while True:
            answer = input("\n‚û§ Does the item generate a magnetic field? (yes/no): ").lower()
            if answer == "yes":
                self.declare(TrashContainer(question="integrated_electronic"))
                break
            elif answer == "no":
                self.declare(TrashContainer(question="organic"))
                break
            else:
                print("Invalid input. Please enter 'yes' or 'no'.")

    # Rule to ask about integrated electronics
    @Rule(TrashContainer(question="integrated_electronic"))
    def ask_integrated_electronic(self):
        global item_type
        while True:
            answer = input("\n‚û§ Does the item have integrated electronic circuits? (yes/no): ").lower()
            if answer == "yes":
                item_type = "Electronic"
                self.declare(TrashContainer(type=item_type))
                break
            elif answer == "no":
                item_type = "Metal"
                self.declare(TrashContainer(type=item_type))
                break
            else:
                print("Invalid input. Please enter 'yes' or 'no'.")

    # Rule to ask about organic molecules
    @Rule(TrashContainer(question="organic"))
    def ask_organic(self):
        global item_type
        while True:
            answer = input("\n‚û§ Does the item consist of organic molecules? (yes/no): ").lower()
            if answer == "yes":
                item_type = "Food"
                self.declare(TrashContainer(type=item_type))
                break
            elif answer == "no":
                self.declare(TrashContainer(question="breakable"))
                break
            else:
                print("Invalid input. Please enter 'yes' or 'no'.")

    # Rule to ask about breakability
    @Rule(TrashContainer(question="breakable"))
    def ask_breakable(self):
        global item_type
        while True:
            answer = input("\n‚û§ Is the item easy to break? (yes/no): ").lower()
            if answer == "yes":
                item_type = "Glass"
                self.declare(TrashContainer(type=item_type))
                break
            elif answer == "no":
                self.declare(TrashContainer(question="fabric"))
                break
            else:
                print("Invalid input. Please enter 'yes' or 'no'.")

    # Rule to ask about fabric
    @Rule(TrashContainer(question="fabric"))
    def ask_fabric(self):
        global item_type
        while True:
            answer = input("\n‚û§ Is the item fabric? (yes/no): ").lower()
            if answer == "yes":
                item_type = "Cloth"
                self.declare(TrashContainer(type=item_type))
                break
            elif answer == "no":
                self.declare(TrashContainer(question="hard_materials"))
                break
            else:
                print("Invalid input. Please enter 'yes' or 'no'.")

    # Rule to ask about hard materials
    @Rule(TrashContainer(question="hard_materials"))
    def ask_hard_materials(self):
        global item_type
        while True:
            answer = input("\n‚û§ Does the item consist of hard materials? (yes/no): ").lower()
            if answer == "yes":
                self.declare(TrashContainer(question="combustible"))
                break
            elif answer == "no":
                self.declare(TrashContainer(question="transparent"))
                break
            else:
                print("Invalid input. Please enter 'yes' or 'no'.")

    # Rule to ask about combustibility
    @Rule(TrashContainer(question="combustible"))
    def ask_combustible(self):
        global item_type
        while True:
            answer = input("\n‚û§ Is the item combustible? (yes/no): ").lower()
            if answer == "yes":
                self.declare(TrashContainer(question="absorb_water"))
                break
            elif answer == "no":
                print("It is not a waste material. Please return it to the beach.")
                self.reset()
                break
            else:
                print("Invalid input. Please enter 'yes' or 'no'.")

    # Rule to ask about water absorbance
    @Rule(TrashContainer(question="absorb_water"))
    def ask_absorb_water(self):
        global item_type
        while True:
            answer = input("\n‚û§ Does the item absorb water? (yes/no): ").lower()
            if answer == "yes":
                item_type = "Wood"
                self.declare(TrashContainer(type=item_type))
                break
            elif answer == "no":
                item_type = "Plastic"
                self.declare(TrashContainer(type=item_type))
                break
            else:
                print("Invalid input. Please enter 'yes' or 'no'.")

    # Rule to ask about transparency
    @Rule(TrashContainer(question="transparent"))
    def ask_transparent(self):
        global item_type
        while True:
            answer = input("\n‚û§ Is the item transparent? (yes/no): ").lower()
            if answer == "yes":
                item_type = "Plastic"
                self.declare(TrashContainer(type=item_type))
                break
            elif answer == "no":
                self.declare(TrashContainer(question="water_resistant"))
                break
            else:
                print("Invalid input. Please enter 'yes' or 'no'.")

    # Rule to ask about water resistance
    @Rule(TrashContainer(question="water_resistant"))
    def ask_water_resistant(self):
        global item_type
        while True:
            answer = input("\n‚û§ Is the item water resistant? (yes/no): ").lower()
            if answer == "yes":
                item_type = "Rubber"
                self.declare(TrashContainer(type=item_type))
                break
            elif answer == "no":
                item_type = "Paper"
                self.declare(TrashContainer(type=item_type))
                break
            else:
                print("Invalid input. Please enter 'yes' or 'no'.")

    # Rule to determine trash container color based on item type
    @Rule(OR(
        TrashContainer(type="Metal"),
        TrashContainer(type="Food"),
        TrashContainer(type="Electronic"),
        TrashContainer(type="Glass"),
        TrashContainer(type="Cloth"),
        TrashContainer(type="Wood"),
        TrashContainer(type="Plastic"),
        TrashContainer(type="Rubber"),
        TrashContainer(type="Paper")
    ))
    def determine_trash_container_color(self):
        global item_type
        print("\nDetermining item type & trash container color ‚è≥...\n")
        container_color = {
            "Metal": "Pink trash container",
            "Food": "Fuchsia trash container",
            "Electronic": "Gray trash container",
            "Glass": "Orange trash container",
            "Cloth": "Purple trash container",
            "Wood": "Brown trash container",
            "Plastic": "Blue trash container",
            "Rubber": "Yellow trash container",
            "Paper": "Green trash container"
        }
        if item_type:
            print("Item type üß©: ", item_type)
            print("Container color üé®: ", container_color.get(item_type, "Sorry, we couldn't determine the appropriate trash container color."))
        else:
            print("Sorry, we couldn't determine the appropriate trash container color.")
        print("\n----------------------------------------------")
        print("== üêö Thank you for using MURJAN system üêö == ")
        print("----------------------------------------------")
        self.reset()

# Instantiate the expert system
expert_system = ExpertSystem()

# Run the expert system
expert_system.reset()
expert_system.run()

